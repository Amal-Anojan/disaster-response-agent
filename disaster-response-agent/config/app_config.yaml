# Disaster Response Multi-Modal Agent Configuration

# Application Settings
app:
  name: "Disaster Response Agent"
  version: "1.0.0"
  debug: false
  environment: "production"  # development, staging, production
  
# Server Configuration
server:
  host: "0.0.0.0"
  port: 8080
  workers: 4
  timeout: 300
  max_request_size: "50MB"
  cors_origins:
    - "http://localhost:8501"
    - "http://127.0.0.1:8501"
    - "http://localhost:3000"

# Streamlit Dashboard Configuration
streamlit:
  host: "0.0.0.0"
  port: 8501
  max_upload_size: 200  # MB
  theme:
    primary_color: "#FF4B4B"
    background_color: "#FFFFFF"
    secondary_background_color: "#F0F2F6"
    text_color: "#262730"

# Database Configuration
database:
  type: "sqlite"  # sqlite, postgresql
  sqlite:
    path: "data/disaster_response.db"
    pool_size: 10
    max_overflow: 20
  postgresql:
    host: "localhost"
    port: 5432
    database: "disaster_response"
    pool_size: 10
    max_overflow: 20
    # username and password should be in environment variables
  
  # Common settings
  echo_sql: false  # Set to true for SQL debugging
  pool_timeout: 30
  pool_recycle: 3600
  backup_enabled: true
  backup_interval_hours: 6

# AI Service Configuration
ai_services:
  # Cerebras Vision Service
  cerebras:
    base_url: "https://api.cerebras.ai"
    model: "llama3.1-70b"  # or latest available model
    max_tokens: 2048
    temperature: 0.3
    timeout: 60
    retry_attempts: 3
    retry_delay: 1.0
    
  # Google Gemini Service
  gemini:
    model: "gemini-1.5-flash"  # or gemini-pro
    max_tokens: 2048
    temperature: 0.3
    safety_settings:
      harassment: "BLOCK_NONE"
      hate_speech: "BLOCK_NONE"
      sexually_explicit: "BLOCK_NONE"
      dangerous_content: "BLOCK_NONE"
    timeout: 60
    retry_attempts: 3
    retry_delay: 1.0

# Rate Limiting Configuration
rate_limiting:
  enabled: true
  
  # Global API limits
  global:
    requests_per_minute: 100
    burst_capacity: 150
    
  # Service-specific limits
  vision_api:
    requests_per_minute: 30
    burst_capacity: 50
  
  llm_api:
    requests_per_minute: 60
    burst_capacity: 100
  
  user_session:
    requests_per_hour: 1000
    burst_capacity: 200
  
  # Database operations
  database_writes:
    requests_per_minute: 200
    burst_capacity: 300

# Security Configuration
security:
  secret_key: null  # Will be generated if null, or set via environment
  jwt:
    algorithm: "HS256"
    access_token_expire_minutes: 30
    refresh_token_expire_days: 7
  
  api_keys:
    prefix: "dr_"
    length: 32
    
  password_policy:
    min_length: 8
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
    require_special_chars: true
    
  failed_attempts:
    max_attempts: 5
    lockout_duration_minutes: 15
    
  cors:
    allow_credentials: true
    allow_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allow_headers: ["*"]
    max_age: 86400

# Logging Configuration
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # File logging
  file:
    enabled: true
    path: "logs/app.log"
    max_size: "10MB"
    backup_count: 5
    rotation: "time"  # time or size
    
  # Console logging
  console:
    enabled: true
    format: "%(levelname)s - %(message)s"
  
  # External logging services
  external:
    enabled: false
    service: "elasticsearch"  # elasticsearch, splunk, etc.
    endpoint: "http://localhost:9200"

# Monitoring Configuration
monitoring:
  enabled: true
  
  # Metrics collection
  metrics:
    enabled: true
    interval_seconds: 60
    retention_hours: 168  # 7 days
    
  # Health checks
  health_checks:
    enabled: true
    interval_seconds: 30
    timeout_seconds: 10
    
    endpoints:
      - name: "database"
        url: "internal://database/health"
        critical: true
        
      - name: "cerebras_api"
        url: "https://api.cerebras.ai/health"
        critical: false
        
      - name: "gemini_api"
        url: "internal://gemini/health"
        critical: false
  
  # Alerting
  alerts:
    enabled: true
    channels:
      - type: "log"
        level: "ERROR"
      - type: "email"
        smtp_server: "smtp.gmail.com"
        smtp_port: 587
        # credentials in environment variables
        
    thresholds:
      error_rate_percent: 5.0
      response_time_ms: 5000
      cpu_usage_percent: 80.0
      memory_usage_percent: 85.0

# Processing Configuration
processing:
  # Image processing
  images:
    max_size_mb: 50
    allowed_formats: ["JPEG", "PNG", "JPG", "WEBP"]
    resize_enabled: true
    max_dimension: 2048
    quality: 85
    
  # Text processing
  text:
    max_length: 10000
    sanitization: true
    language_detection: true
    supported_languages: ["en", "es", "fr", "de", "it"]
    
  # Batch processing
  batch:
    enabled: true
    max_batch_size: 10
    timeout_seconds: 300
    concurrent_workers: 4

# Emergency Response Configuration
emergency_response:
  # Response time targets (minutes)
  response_time_targets:
    critical: 5
    high: 10
    medium: 20
    low: 60
    
  # Resource allocation
  resource_allocation:
    optimization_enabled: true
    max_distance_km: 50
    prefer_closest_resources: true
    reserve_percentage: 20  # Keep 20% in reserve
    
  # Notification settings
  notifications:
    enabled: true
    channels: ["sms", "email", "push", "radio"]
    escalation_levels: 3
    escalation_delay_minutes: 15

# Cache Configuration
cache:
  enabled: true
  type: "memory"  # memory, redis, memcached
  
  # Memory cache settings
  memory:
    max_size_mb: 500
    ttl_seconds: 3600
    
  # Redis settings (if type: redis)
  redis:
    host: "localhost"
    port: 6379
    database: 0
    max_connections: 20
    
  # Cache policies
  policies:
    analysis_results:
      ttl_seconds: 1800  # 30 minutes
      max_items: 1000
      
    resource_data:
      ttl_seconds: 300   # 5 minutes
      max_items: 500
      
    user_sessions:
      ttl_seconds: 3600  # 1 hour
      max_items: 200

# Feature Flags
features:
  enable_vision_analysis: true
  enable_text_analysis: true
  enable_resource_allocation: true
  enable_predictive_analytics: true
  enable_real_time_updates: true
  enable_mobile_app: false
  enable_social_media_monitoring: false
  enable_weather_integration: false
  enable_traffic_integration: false
  
  # Experimental features
  experimental:
    enable_ai_chat: false
    enable_voice_commands: false
    enable_augmented_reality: false
    enable_drone_integration: false

# Integration Configuration
integrations:
  # Weather services
  weather:
    enabled: false
    provider: "openweathermap"  # openweathermap, weatherapi
    api_key_env: "WEATHER_API_KEY"
    update_interval_minutes: 15
    
  # Traffic services
  traffic:
    enabled: false
    provider: "google_maps"  # google_maps, mapbox
    api_key_env: "MAPS_API_KEY"
    
  # Social media monitoring
  social_media:
    enabled: false
    platforms: ["twitter", "facebook", "instagram"]
    keywords: ["emergency", "fire", "flood", "earthquake", "accident"]
    
  # External emergency services
  emergency_services:
    enabled: true
    # Integration with existing emergency dispatch systems
    dispatch_system:
      type: "webhook"  # webhook, api, database
      endpoint: "http://dispatch.emergency.gov/api/incidents"
    
  # GIS services
  gis:
    enabled: true
    provider: "openstreetmap"  # openstreetmap, google_maps, arcgis
    
# Backup and Recovery
backup:
  enabled: true
  
  # Database backups
  database:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM (cron format)
    retention_days: 30
    compression: true
    encryption: true
    
  # File backups
  files:
    enabled: true
    include_paths:
      - "data/knowledge_base/"
      - "logs/"
      - "config/"
    schedule: "0 3 * * 0"  # Weekly on Sunday at 3 AM
    retention_weeks: 8
    
  # Backup destinations
  destinations:
    - type: "local"
      path: "/backup/disaster_response/"
    - type: "s3"
      bucket: "disaster-response-backups"
      region: "us-east-1"
      enabled: false

# Development and Testing
development:
  debug_mode: false
  mock_apis: false
  sample_data: true
  test_mode: false
  
  # Development server settings
  auto_reload: false
  profiling: false
  memory_debugging: false
  
  # Testing configuration
  testing:
    run_integration_tests: true
    test_data_path: "tests/data/"
    mock_responses: true
    timeout_seconds: 30

# Performance Tuning
performance:
  # Connection pools
  connection_pools:
    max_size: 20
    min_size: 2
    acquire_timeout: 30
    
  # Async settings
  async_workers: 4
  max_concurrent_requests: 100
  
  # Memory settings
  max_memory_mb: 2048
  gc_threshold: 0.8  # Trigger GC when 80% memory used
  
  # Processing optimization
  batch_processing: true
  lazy_loading: true
  connection_reuse: true
  
  # Caching strategies
  aggressive_caching: false
  cache_warm_up: true